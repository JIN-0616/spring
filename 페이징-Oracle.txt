spring 기반으로 페이징모듈을 만들어 보겠습니다. 설명은 마지막에 적겠습니다.

페이징 테스트를 위한 아주 간단한 테이블로 하겠습니다.


CREATE TABLE BOARD(
   TITLE     VARCHAR2 (1000),
   REGDATE   DATE DEFAULT SYSDATE
)
Colored by Color Scripter
cs




쿼리에서 중요한 부분은 주석달린 부분입니다.


    <!-- 2. ROWNUM Query -->
    <select id="selectPaging" parameterType="pagingVo" resultType="listDto">
        SELECT *
        FROM (    SELECT ROWNUM RNUM, P.*
                FROM (    SELECT *
                        FROM BOARD
                        ORDER BY REGDATE DESC ) P )
        WHERE RNUM BETWEEN #{start} AND #{last}
    </select>
    <!-- 2. Total Query -->
    <select id="selectTotalPaging" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM BOARD
    </select>
 
 
    <insert id="listInsert" parameterType="listDto">
        INSERT INTO BOARD
        (TITLE)
        VALUES (#{title})
    </insert>
    <delete id="deleteAll">
        DELETE FROM BOARD
    </delete>
Colored by Color Scripter
cs




그리고 가장중요한 VO부분입니다.

package com.t.hc.vo;
 
//1. PagingVo
public class PagingVo {
    
    private int pageCnt;          // 출력할 페이지번호 갯수
    private int index;            // 출력할 페이지번호
    private int pageStartNum;    // 출력할 페이지 시작 번호
    private int listCnt;          // 출력할 리스트 갯수
    private int total;            // 리스트 총 갯수    
    
    {
        pageCnt = 5;
        index = 0;
        pageStartNum = 1;
        listCnt = 5;
    }
    
    public PagingVo() {}
    
    public int getStart() {
        return index*listCnt+1;
    }
    public int getLast() {
        return (index*listCnt)+listCnt;
    }
    public int getPageLastNum() {
        int remainListCnt = total-listCnt*(pageStartNum-1);
        int remainPageCnt = remainListCnt/listCnt;
        if(remainListCnt%listCnt != 0) {
            remainPageCnt++;
        }
        int pageLastNum = 0;
        if(remainListCnt <= listCnt) {
            pageLastNum = pageStartNum;
        }else if(remainPageCnt <= pageCnt) {
            pageLastNum = remainPageCnt+pageStartNum-1;
        }else {
            pageLastNum = pageCnt+pageStartNum-1;
        }
        return pageLastNum;
    }
    public boolean getLastChk() {
        int n = (int)Math.ceil((double)total/listCnt);
        return getPageLastNum()==n ? false : n==0 ? false : true;
    }
    
    public int getPageCnt() {
        return pageCnt;
    }
    public void setPageCnt(int pageCnt) {
        this.pageCnt = pageCnt;
    }
    public int getIndex() {
        return index;
    }
    public void setIndex(int index) {
        this.index = index;
    }
    public int getPageStartNum() {
        return pageStartNum;
    }
    public void setPageStartNum(int pageStartNum) {
        this.pageStartNum = pageStartNum;
    }
    public int getListCnt() {
        return listCnt;
    }
    public void setListCnt(int listCnt) {
        this.listCnt = listCnt;
    }
    public int getTotal() {
        return total;
    }
    public void setTotal(int total) {
        this.total = total;
    }
    
    @Override
    public String toString() {
        return "PagingDto [pageCnt=" + pageCnt + ", index=" + index + ", pageStartNum=" + pageStartNum + ", listCnt="
                + listCnt + ", total=" + total + "]";
    }
}



Controller부분입니다 주석달린부분을 유심히보면됩니다.


package com.t.hc;
 
import java.util.List;
import java.util.Random;
 
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
 
import com.t.hc.dto.ListDto;
import com.t.hc.model.ListService;
import com.t.hc.vo.PagingVo;
 
@Controller
public class HandcodingController {
    
    private Logger logger = LoggerFactory.getLogger(HandcodingController.class);
    
    @Autowired
    private ListService service;
    
    // 3. Controller
    @RequestMapping(value="/paging.do", method={RequestMethod.POST,RequestMethod.GET})
    public String paging(Model model, PagingVo paging){
        logger.info("paging : " + paging);
        List<ListDto> lists = service.selectPaging(paging);
        paging.setTotal(service.selectTotalPaging());
        model.addAttribute("lists", lists);
        model.addAttribute("p", paging);
        return "paging";
    }
    
    
    @RequestMapping(value="/list.do", method=RequestMethod.GET)
    public String list(String num){
        logger.info("list : " + num);
        Random ran = new Random();
        for (int i = 0; i < Integer.parseInt(num); i++) {
            service.listInsert(new ListDto(ran.nextInt(100000000)+""));
        }
        return "redirect:/paging.do";
    }
    @RequestMapping(value="/remove.do")
    public String remove(){
        logger.info("remove");
        service.deleteAll();
        return "redirect:/paging.do";
    }    
}
Colored by Color Scripter
cs




javascript 부분


// 4. Javascript
//submit
function frmPaging() {
    document.getElementById("frmPaging").submit();
}
// 이전 페이지 index
function pagePre(index, pageCnt) {
    if (0 < index - pageCnt) {
        index -= pageCnt;
        document.getElementById("pageStartNum").value = index;
        document.getElementById("index").value = index - 1;
        frmPaging();
    }
}
// 다음 페이지 index
function pageNext(index, total, listCnt, pageCnt) {
    var totalPageCnt = Math.ceil(total / listCnt);
    var max = Math.ceil(totalPageCnt / pageCnt);
    if (max * pageCnt > index + pageCnt) {
        index += pageCnt;
        document.getElementById("pageStartNum").value = index;
        document.getElementById("index").value = index - 1;
        frmPaging();
    }
}
// 마지막 페이지 index
function pageLast(index, total, listCnt, pageCnt) {
    var totalPageCnt = Math.ceil(total / listCnt);
    var max = Math.ceil(totalPageCnt / pageCnt);
    while (max * pageCnt > index + pageCnt) {
        index += pageCnt;
    }
    var remainListCnt = total - listCnt * (index - 1);
    var remainPageCnt = Math.floor(remainListCnt / listCnt);
    if (remainListCnt % listCnt != 0) {
        remainPageCnt++;
    }
    var pageLastNum = 0;
    if (remainListCnt <= listCnt) {
        pageLastNum = index;
    } else if (remainPageCnt <= pageCnt) {
        pageLastNum = remainPageCnt + index - 1;
    } else {
        pageLastNum = pageCnt + index - 1;
    }
    document.getElementById("pageStartNum").value = index;
    document.getElementById("index").value = pageLastNum - 1;
    frmPaging();
}
// index 리스트 처리
function pageIndex(pageStartNum) {
    document.getElementById("index").value = pageStartNum - 1;
    frmPaging();
}
// 리스트출력개수 처리
function listCnt() {
    document.getElementById("index").value = 0;
    document.getElementById("pageStartNum").value = 1;
    document.getElementById("listCnt").value = document.getElementById("listCount").value;
    frmPaging();
}
window.onload = function() {
    // 현재번호 active
    var index = document.getElementById("index").value;
    var pageIndex = document.querySelector('.pageIndex'+(Number(index)+1));
    pageIndex.setAttribute("class", "active");
    // 리스트갯수 selected 처리
    $("#listCount > option").each(function () {
        if ($(this).val() == $('#listCnt').val()) {
            $(this).prop("selected", true);
        }
    });
}



5. list view 부분


<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
<script src="./js/jquery-3.1.1.min.js"></script>
<script src="./js/bootstrap.min.js"></script>
<link rel="stylesheet" href="./css/bootstrap.min.css">
<link rel="stylesheet" href="./css/bootstrap-theme.min.css">
 
<!-- 4. Javascript -->
<script type="text/javascript" src="./js/paging.js"></script>
 
</head>
<body>
 
    <div class="container">
    
        <select class='btn btn-primary' id='listCount' name='listCount' onchange='listCnt();'>
            <option value='5' >5</option>
            <option value='10'>10</option>
            <option value='15'>15</option>
            <option value='20'>20</option>
        </select>
    
        <table class="table table-bordered">
            <tr>
                <th>제목</th>
                <th>작성일</th>
            </tr>
            <c:forEach var="dto" items="${lists}">
                <tr>
                    <td>${dto.title}</td>
                    <td>${dto.regdate}</td>
                </tr>                        
            </c:forEach>
        </table>
    
        <!-- 5. paging view -->    
        <ul class="pagination">
            <c:if test="${p.pageStartNum ne 1}">
                <!--맨 첫페이지 이동 -->
                <li><a onclick='pagePre(${p.pageCnt+1},${p.pageCnt});'>«</a></li>
                <!--이전 페이지 이동 -->
                <li><a onclick='pagePre(${p.pageStartNum},${p.pageCnt});'>‹</a></li>
            </c:if>
            
            <!--페이지번호 -->
            <c:forEach var='i' begin="${p.pageStartNum}" end="${p.pageLastNum}" step="1">
                <li class='pageIndex${i}'><a onclick='pageIndex(${i});'>${i}</a></li>
            </c:forEach>
            
            <c:if test="${p.lastChk}">
                <!--다음 페이지 이동 -->
                <li><a onclick='pageNext(${p.pageStartNum},${p.total},${p.listCnt},${p.pageCnt});'>›</a></li>
                <!--마지막 페이지 이동 -->
                <li><a onclick='pageLast(${p.pageStartNum},${p.total},${p.listCnt},${p.pageCnt});'>»</a></li>
            </c:if>
        </ul>
        <form action="./paging.do" method="post" id='frmPaging'>
            <!--출력할 페이지번호, 출력할 페이지 시작 번호, 출력할 리스트 갯수 -->
            <input type='hidden' name='index' id='index' value='${p.index}'>
            <input type='hidden' name='pageStartNum' id='pageStartNum' value='${p.pageStartNum}'>
            <input type='hidden' name='listCnt' id='listCnt' value='${p.listCnt}'>    
        </form>
    
        <div><a href="./remove.do">모두삭제</a></div><br/>
        <div><a href="./list.do?num=1">리스트1개추가하기</a></div><br/>
        <div><a href="./list.do?num=3">리스트3개추가하기</a></div><br/>
        <div><a href="./list.do?num=5">리스트5개추가하기</a></div><br/>
        <div><a href="./list.do?num=10">리스트10개추가하기</a></div><br/>
        <div><a href="./list.do?num=20">리스트20개추가하기</a></div><br/>
        <div><a href="./list.do?num=50">리스트50개추가하기</a></div><br/>
        <div><a href="./list.do?num=100">리스트100개추가하기</a></div><br/>
    </div>
</body>
</html>


페이징에서 필수적인 부분은 당연히 rownum부분이고 그다음 페이지번호를 동적으로 처리하기 위해 total 값이 필요하게 됩니다.

두개의 쿼리를 하나로 짤수 있지만 그 부분은 취향에 맞춰 짜시면됩니다.

여기서 중요한 부분은 start, last 값의 바인딩인데요





최초 컨트롤에서 생성될때 




pagingVo 객체 멤버필드가 초기화블럭으로 정해진 값으로 초기화 되고



만약 view에서 값이 넘어오면 setter로 다시 바뀌게 됩니다.



그런다음 쿼리에서 start와 last값을 바인딩하는데 start, last값은 멤버필드의 연산결과값이기 때문에 getter만 만들어줍니다.



jsp에서 주의해서 보실점은  ${p.pageLastNum} 부분인데요 이녀석은 페이지 리스트 갯수에 맞춰 동적으로 찍어주기 위해서입니다.





최대 5개씩 출력되는데 마지막페이지에서 리스트 갯수에 맞게 6, 7페이지만 나오는걸 볼수 있습니다.



그래서 마지막 값을 마찬가지로 멤버필드 연산결과이기때문에 getter만 만듭니다.



pageLastNum을 구하기위해 total이 필요하게 됩니다.





다음으로는 ${p.lastChk} 는 다음페이지 이동 버튼이 필요한지 체크하기 위해서입니다.







그래서 요녀석도 getter만 만들어줍니다.





마지막으로 페이지번호 이동처리는 javascript로 form태그 안에있는 값들을 변경합니다. 그리고 controller로 보내게 됩니다.







추가내용으로는 검색페이징처리시 바인딩 값이 더 필요하게됩니다. 하지만 멤버필드에는 없기 때문에

그때그때 필요할때마다 멤버필드에 추가 하게 되면 공통모듈로서는 쓸모가 없어지게됩니다. 그래서 처리하실때는

parameterType 부분을





java.util.Map으로 Map의 키.start로 바인딩하시면됩니다.

선언하실때 generic타입은 <key, value>에서 key는 String, value는 여러 객체를 담기위해

Object로 <String, Object>로 정의하시면 됩니다.







 paging.zip





추가 페이징 ajax처리시

paging.js

// paging 객체
var paging = {
        // 기본값 셋팅
        p: {
            index : 0,
            pageStartNum : 1
        },
        // 페이징 생성
        create: function(){
            var htmlTag = '';
            for (var i = paging.p.pageStartNum; i <= paging.p.pageLastNum; i++) {
                htmlTag += '<li class="pageIndex"><span>'+i+'</span></li>';
            }
            $('.index').html(htmlTag);
            
            // 현재 번호 ui
            $('.pageIndex').each(function(){
                if(paging.p.index == $(this).text()-1) {
                    $(this).addClass('active');
                }else {
                    $(this).removeClass('active');
                }
            });
            
            // 이전 페이지 이동 버튼 생성여부
            if(paging.p.pageStartNum != 1) {
                $('.preBtn').html('<li id="pagePreFirst"><span>«</span></li><li id="pagePre"><span>‹</span></li>');
                // 맨 첫 페이지 index
                $('#pagePreFirst').click(function(){
                    var index = paging.p.pageCnt+1;
                    var pageCnt = paging.p.pageCnt;
                    if (0 < index - pageCnt) {
                        index -= pageCnt;
                        paging.p.pageStartNum = index;
                        paging.p.index = index-1;
                        paging.ajax();
                    }
                });
                
                // 이전 페이지 index
                $('#pagePre').click(function(){
                    var index = paging.p.pageStartNum;
                    var pageCnt = paging.p.pageCnt;
                    if (0 < index - pageCnt) {
                        index -= pageCnt;
                        paging.p.pageStartNum = index;
                        paging.p.index = index-1;
                        paging.ajax();
                    }
                });
            }else {
                $('.preBtn').children('li').remove();
            }
            
            // index 리스트 처리
            $('.pageIndex').click(function(){
                var index = Number($(this).find('span').text());
                paging.p.index = index - 1;
                paging.ajax();
            });
            
            // 다음 페이지 이동 버튼 생성여부
            if(paging.p.lastChk) {
                $('.nextBtn').html('<li id="pageNext"><span>›</span></li><li id="pageLast"><span>»</span></li>');
                // 다음 페이지 index
                $('#pageNext').click(function(){
                    var index = paging.p.pageStartNum;
                    var total = paging.p.total;
                    var listCnt = paging.p.listCnt;
                    var pageCnt = paging.p.pageCnt;
                    
                    var totalPageCnt = Math.ceil(total / listCnt);
                    var max = Math.ceil(totalPageCnt / pageCnt);
                    if (max * pageCnt > index + pageCnt) {
                        index += pageCnt;
                        paging.p.pageStartNum = index;
                        paging.p.index = index-1;
                        paging.ajax();
                    }
                });
                // 마지막 페이지 index
                $('#pageLast').click(function(){
                    var index = paging.p.pageStartNum;
                    var total = paging.p.total;
                    var listCnt = paging.p.listCnt;
                    var pageCnt = paging.p.pageCnt;
                    
                    var totalPageCnt = Math.ceil(total / listCnt);
                    var max = Math.ceil(totalPageCnt / pageCnt);
                    while (max * pageCnt > index + pageCnt) {
                        index += pageCnt;
                    }
                    var remainListCnt = total - listCnt * (index - 1);
                    var remainPageCnt = Math.floor(remainListCnt / listCnt);
                    if (remainListCnt % listCnt != 0) {
                        remainPageCnt++;
                    }
                    var pageLastNum = 0;
                    if (remainListCnt <= listCnt) {
                        pageLastNum = index;
                    } else if (remainPageCnt <= pageCnt) {
                        pageLastNum = remainPageCnt + index - 1;
                    } else {
                        pageLastNum = pageCnt + index - 1;
                    }
                    paging.p.pageStartNum = index;
                    paging.p.index = index-1;
                    paging.ajax();
                });
            }else {
                $('.nextBtn').children('li').remove();
            }
        },
        remove : function() {
            $('.preBtn').children('li').remove();
            $('.index').html('1');
            $('.nextBtn').children('li').remove();
        }
};
Colored by Color Scripter
cs


paging.jsp

1
2
3
4
5
6
7
8
9
10
11
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<link rel="stylesheet" href="/resources/css/common/paging.css">
<script src="/resources/js/common/paging.js"></script>    
<!--맨 첫페이지 이동 -->
<!--이전 페이지 이동 -->
<ul class="pagination preBtn"></ul>
<!--페이지번호 -->
<ul class="pagination index"></ul>
<!--다음 페이지 이동 -->
<!--마지막 페이지 이동 -->
<ul class="pagination nextBtn"></ul>
Colored by Color Scripter
cs


paging.css
.pagination {
  display: inline-block;
  padding-left: 0px;
  margin: auto;
  border-radius: 4px;
}
.pagination > li {
  display: inline;
}
.pagination > li > a,
.pagination > li > span {
  position: relative;
  float: left;
  padding: 6px 12px;
  margin-left: -1px;
  line-height: 1.42857143;
  color: #337ab7;
  text-decoration: none;
  background-color: #fff;
  border: 1px solid #ddd;
}
.pagination > li:first-child > a,
.pagination > li:first-child > span {
  margin-left: 0;
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
.pagination > li:last-child > a,
.pagination > li:last-child > span {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}
.pagination > li > a:hover,
.pagination > li > span:hover,
.pagination > li > a:focus,
.pagination > li > span:focus {
  color: #23527c;
  background-color: #eee;
  border-color: #ddd;
}
.pagination > .active > a,
.pagination > .active > span,
.pagination > .active > a:hover,
.pagination > .active > span:hover,
.pagination > .active > a:focus,
.pagination > .active > span:focus {
  z-index: 2;
  color: #fff;
  cursor: default;
  background-color: #337ab7;
  border-color: #337ab7;
}
.pagination > .disabled > span,
.pagination > .disabled > span:hover,
.pagination > .disabled > span:focus,
.pagination > .disabled > a,
.pagination > .disabled > a:hover,
.pagination > .disabled > a:focus {
  color: #777;
  cursor: not-allowed;
  background-color: #fff;
  border-color: #ddd;
}
.pagination-lg > li > a,
.pagination-lg > li > span {
  padding: 10px 16px;
  font-size: 18px;
}
.pagination-lg > li:first-child > a,
.pagination-lg > li:first-child > span {
  border-top-left-radius: 6px;
  border-bottom-left-radius: 6px;
}
.pagination-lg > li:last-child > a,
.pagination-lg > li:last-child > span {
  border-top-right-radius: 6px;
  border-bottom-right-radius: 6px;
}
.pagination-sm > li > a,
.pagination-sm > li > span {
  padding: 5px 10px;
  font-size: 12px;
}
.pagination-sm > li:first-child > a,
.pagination-sm > li:first-child > span {
  border-top-left-radius: 3px;
  border-bottom-left-radius: 3px;
}
.pagination-sm > li:last-child > a,
.pagination-sm > li:last-child > span {
  border-top-right-radius: 3px;
  border-bottom-right-radius: 3px;
}
Colored by Color Scripter
cs




사용법

1
<jsp:include page=".... /paging.jsp" />
cs

$(function(){
    // 3.페이징 처리할 ajax셋팅
    paging.ajax = ajaxList;
    ajaxList();
});
 
var ajaxList = function(){    
    var submitData = {};
    // 1.페이징시 필요 데이터 셋팅
    submitData.index = paging.p.index;
    submitData.pageStartNum = paging.p.pageStartNum;
    $.ajax({
        url: 'url',
        type: 'post',
        data: submitData,
        success : function(obj){
            .
            .
            .
            // 2.페이징정보와 화면 ui셋팅
            paging.p = obj.p;
            paging.create();
        }
    });    
}
Colored by Color Scripter
cs


vo

public class PagingFrontVO {
 
    private int pageCnt; // 출력할 페이지번호 갯수
    private int index; // 출력할 페이지번호
    private int pageStartNum; // 출력할 페이지 시작 번호
    private int listCnt; // 출력할 리스트 갯수
    private int total; // 리스트 총 갯수
    private int pageLastNum;
    private boolean lastChk;
    {
        pageCnt = 5;
        index = 0;
        pageStartNum = 1;
        listCnt = 5;
        pageLastNum = 0;
    }
    public PagingFrontVO() {}
    public int getStart() {
        return index * listCnt;
    }
    public int getLast() {
        return (index * listCnt) + listCnt;
    }
    public int getPageLastNum() {
        return pageLastNum;
    }
    public boolean getLastChk() {
        return lastChk;
    }
    public int getPageCnt() {
        return pageCnt;
    }
    public void setPageCnt(int pageCnt) {
        this.pageCnt = pageCnt;
    }
    public int getIndex() {
        return index;
    }
    public void setIndex(int index) {
        this.index = index;
    }
    public int getPageStartNum() {
        return pageStartNum;
    }
    public void setPageStartNum(int pageStartNum) {
        this.pageStartNum = pageStartNum;
    }
    public int getListCnt() {
        return listCnt;
    }
    public void setListCnt(int listCnt) {
        this.listCnt = listCnt;
    }
    public int getTotal() {
        return total;
    }
    public void setTotal(int total) {
        this.total = total;
        int remainListCnt = total - listCnt * (pageStartNum - 1);
        int remainPageCnt = remainListCnt / listCnt;
        if (remainListCnt % listCnt != 0) {
            remainPageCnt++;
        }
        if (remainListCnt <= listCnt) {
            pageLastNum = pageStartNum;
        } else if (remainPageCnt <= pageCnt) {
            pageLastNum = remainPageCnt + pageStartNum - 1;
        } else {
            pageLastNum = pageCnt + pageStartNum - 1;
        }
        int n = (int) Math.ceil((double) total / listCnt);
        lastChk = getPageLastNum() == n ? false : n == 0 ? false : true;
    }
    public void setPageLastNum(int pageLastNum) {
        this.pageLastNum = pageLastNum;
    }
    public void setLastChk(boolean lastChk) {
        this.lastChk = lastChk;
    }
    @Override
    public String toString() {
        return "PagingFrontVO [pageCnt=" + pageCnt + ", index=" + index + ", pageStartNum=" + pageStartNum
                + ", listCnt=" + listCnt + ", total=" + total + ", pageLastNum=" + pageLastNum
                + ", lastChk=" + lastChk + "]";
    }
}



// StringBuffer
var StringBuffer = function() {
this.buffer = new Array();
};
StringBuffer.prototype.append = function(str) {
this.buffer[this.buffer.length] = str;
};
StringBuffer.prototype.toString = function() {
return this.buffer.join("");
};

$(function(){
// 3.페이징 처리할 ajax셋팅
paging.ajax = ajaxList;
ajaxList();
});

var ajaxList = function(){ 
var submitData = {};
// 1.페이징시 필요 데이터 셋팅
submitData.index = paging.p.index;
submitData.pageStartNum = paging.p.pageStartNum;
$.ajax({
url: 'url',
type: 'post',
data: submitData,
success : function(obj){

// 리스트 태그 생성
$('#list').html(listTag(obj.list));

// 2.페이징정보와 화면 ui셋팅
paging.p = obj.p;
paging.create();
}
}); 
}

function listTag(obj){
var tag = new StringBuffer();
for (var i = 0; i < obj.length; i++) {
tag.append('<p>'+obj[i].값+'</p>');
}
return tag.toString();
}

그리고 ajax controller 반환 vo 구조
public class ajaxListVO {
private List<객체> list;
private PagingVO p;
.
.
.
